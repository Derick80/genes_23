// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @unique @default(cuid())
  email String @unique
  password String
  username String @unique
  posts Post[]

}

model Post {
  id String @id @unique @default(cuid())
  title String
  slug String @unique
  description String
  content String
  imgUrl String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  categories Category[]

}

model Category {
  id String @id @unique @default(cuid())
  label String @unique
  posts Post[]
}

model Gene {
  id String @id @unique @default(cuid())
  symbol String @unique
  variants Variant[]
  lofMetrics LofMetrics[]
  acmgGermlineGenes AcmgGermlineGene[]
}

model AcmgGermlineGene {
  id String @id @unique @default(cuid())
  symbol String 
  gene Gene @relation(fields: [geneId], references: [id], onDelete: Cascade)
  geneId String 
  geneMime Int?
  diseasePhenotype String?
  disorderMime String?
  phenotypeCategory String?
  inheritanceMode String?
  sfListVersion Int?
  variantsToReport String?

@@index([symbol, geneId])
}

model Clinvar {
  id String @id @unique @default(cuid())
 alleleId Int
    type String
    name String
    geneid Int
    genesymbol String
    hgnc_id String
    clinicalsignificance String
    clinsigsimple Int
    lastevaluated String
    rsid Int
    dbvar String
    rcvaccession String
    phenotypeids String
    phenotypelist String
    origin String
    originsimple String
    assembly String
    chromosomeaccession String
    chromosome String
    start Int
    stop Int
    referenceallele String
    alternateallele String
    cytogenetic String
    reviewstatus String
    numbersubmitters Int
    guidelines String
    testedingtr String
    otherids String
    submittercategories Int
    variationid Int
    positionvcf Int
    referenceallelevcf String
    alternateallelevcf String

@@index([genesymbol])


}
model LofMetrics {
  id String @id @unique @default(cuid())
  gene Gene @relation(fields: [geneId], references: [id], onDelete: Cascade)
  geneId String
  transcript String?
  obs_mis Int?
  exp_mis Float?
  oe_mis Float?
  
}

model Variant {
  id String @id @unique @default(cuid())
  gene Gene @relation(fields: [geneId], references: [id], onDelete: Cascade)
  geneId String
  symbol String @unique
  transcript String
  hgvs String
  protein String
  cdna String
  aa String
  chr String
  pos Int
  ref String
  alt String
  hgnc String
  omim String
  clinvar String
  sift String
  polyphen String
  zygosity String
  vaf Float
  crierion Criterion[]

}



model CriteriaCategory {
  id String @id @unique @default(cuid())
  category String
  criteria Criteria[]
}

model Criteria {
  id String @id @unique @default(cuid())
  criteriaCategory CriteriaCategory @relation(fields: [criteriaCategoryId], references: [id], onDelete: Cascade)
  criteriaCategoryId String
  criteria String
  weight Float
}

model Criterion {
  id String @id @unique @default(cuid())
  label String @unique
  weight Float
  evidenceTypeShort String
  criterionBaseWeight String
  evidenceType String
  definition String
  example String?
  caveat String?
  variant Variant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String?

}


model PdfLibrary {
  id String @id @unique @default(cuid())
  semanticScholarId String @unique
  internalPdfUrl String @unique
  semanticScholarUrl String
  pmid String
  pmcid String
 title String
 abstract String
  authors String[]
  journal String
  pubYear Int
  doi String
  notesHistory String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now()  )
  pdfNotes PdfNotes[]
   

}
// store notes for each pdf in the library and keep a history of notes

model PdfNotes {
  id String @id @unique @default(cuid())
  pdfLibrary PdfLibrary @relation(fields: [pdfLibraryId], references: [id], onDelete: Cascade)
  pdfLibraryId String
  notes String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}